{"version":3,"sources":["components/Message/Message.tsx","components/MessageList/MessageList.tsx","hooks/useFromField.ts","components/MessageForm/MessageForm.tsx","pages/Error.tsx","actions/chats.ts","components/Messenger/Messenger.tsx","actions/profile.ts","containers/MessengerContainer.tsx","pages/Profile.tsx","containers/ProfileContainer.tsx","components/Header/Header.tsx","containers/HeaderContainer.tsx","components/ChatItem/ChatItem.tsx","components/ChatForm/ChatForm.tsx","components/ChatsList/ChatsList.tsx","containers/ChatsListContainer.tsx","components/Layout/Layout.tsx","middlewares/bot.ts","middlewares/sendMessage.ts","reducers/chats.ts","reducers/profile.ts","store.ts","reducers/index.ts","index.tsx"],"names":["Message","text","author","classes","classNames","className","style","listStyleType","fontFamily","MessageList","messages","map","message","key","id","useFormField","initialValue","useState","value","setValue","onChange","useCallback","event","target","clearValue","useStyles","makeStyles","root","display","justifyContent","margin","marginTop","width","btn","backgroundColor","label","fontSize","MessageForm","onSend","profile","textField","handleMessageSend","str","test","alert","TextField","name","onKeyDown","InputLabelProps","multiline","fullWidth","Fab","variant","onClick","Send","Error","height","flexDirection","alignItems","ChatsActionTypes","Messenger","title","nameProfile","avatarChat","loadStatus","onAdd","ListItem","ListItemAvatar","Avatar","src","ListItemText","primary","length","ProfileActionTypes","chatsLoadAction","createAction","endpoint","method","headers","types","CHAT_LOAD_REQUEST","CHAT_LOAD_SUCCESS","CHAT_LOAD_FAILURE","chatsMessageSendAction","type","CHATS_MESSAGE_SEND","payload","messageUnfireAction","chatId","MESSAGE_UNFIRE","profileLoadAction","PROFILE_LOAD_REQUEST","PROFILE_LOAD_SUCCESS","PROFILE_LOAD_FAILURE","MessengerContainer","dispatch","useDispatch","useParams","chats","useSelector","state","entries","avatar","useEffect","nanoid","Profile","infoProfile","age","city","mainChat","ProfileContainer","Header","textDecoration","cursor","to","color","HeaderContainer","ChatItem","fire","Divider","component","multilineColor","ChatForm","nameChat","handleChatSend","preventDefault","InputProps","input","inputProps","maxLength","IconButton","aria-label","ChatsList","fireChats","List","chat","newchat","ChatsListContainer","fireChatsId","lastChatId","toString","CHATSLISTS_SEND","push","Layout","exact","path","render","answerBot","botMiddlewares","store","next","action","includes","setTimeout","currentChat","getState","router","location","pathname","match","MESSAGE_FIRE","messageFireAction","filter","i","addMessageMiddleware","body","JSON","stringify","CHATS_MESSAGE_SEND_REQUEST","CHATS_MESSAGE_SEND_SUCCESS","res","a","json","CHATS_MESSAGE_SEND_FAILURE","initialState","error","chatsReducer","Array","fill","update","$push","$merge","$set","profileReducer","history","createBrowserHistory","persistConfig","storage","blacklist","createStore","persistReducer","combineReducers","connectRouter","composeWithDevTools","applyMiddleware","apiMiddleware","logger","routerMiddleware","persistor","persistStore","initStore","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.a208b61c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport classNames from \"classnames\";\n\nimport \"./Message.scss\";\nexport type MessageType = {\n  text: string;\n  author: string;\n};\nexport const Message = ({ text, author }: MessageType) => {\n  const classes = classNames(\"message\", {\n    \"message-sender\": author !== \"Robot\",\n    \"message-bot\": author === \"Robot\",\n  });\n\n  return (\n    <div className={classes}>\n      <ul>\n        <li\n          key={text}\n          style={{ listStyleType: \"none\", fontFamily: \"Courier Prime\" }}\n        >\n          {text}\n          <br /> <b className=\"message-author\">{author}</b>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Message } from \"../Message\";\nimport { MessagePayload } from \"../../actions/chats\";\n\ntype MessageListType = {\n  messages: Array<MessagePayload>;\n};\n\nexport const MessageList: React.FC<MessageListType> = ({ messages }) => {\n  return (\n    <div>\n      {messages.map((message) => (\n        <Message {...message} key={message.id} />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\r\n\r\nexport const useFormField = (initialValue = \"\") => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const onChange = useCallback((event) => setValue(event.target.value), []);\r\n  const clearValue = useCallback(() => {\r\n    setValue(\"\");\r\n  }, []);\r\n  return { value, onChange, clearValue };\r\n};\r\n","import React, { useState } from \"react\";\nimport { TextField, Fab, withStyles, makeStyles } from \"@material-ui/core\";\nimport { Send } from \"@material-ui/icons\";\nimport { MessageType } from \"../Message/Message\";\nimport { useFormField } from \"../../hooks/useFromField\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    margin: \"0 auto\",\n    marginTop: \"15px\",\n    width: \"90%\",\n  },\n  btn: {\n    backgroundColor: \"red\",\n  },\n  label: {\n    fontSize: \"26\",\n    fontFamily: \"Courier Prime\",\n  },\n});\n\ntype MessageFormType = {\n  onSend: (message: MessageType) => void;\n  profile: string;\n};\n\nexport const MessageForm: React.FC<MessageFormType> = ({ onSend, profile }) => {\n  const textField = useFormField();\n\n  const isEmpty = (str: string): boolean => {\n    return !str || /^\\s*$/.test(str);\n  };\n\n  const handleMessageSend = (): void => {\n    const author: string = profile;\n    const text: string = textField.value;\n\n    if (isEmpty(text)) {\n      alert(\"Empty input field!\");\n      return;\n    }\n\n    if (typeof onSend === \"function\") {\n      onSend({ author, text });\n      textField.clearValue();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (event.key === \"Enter\") {\n      handleMessageSend();\n      textField.clearValue();\n    }\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <TextField\n        label=\"Enter text...\"\n        name=\"text\"\n        value={textField.value}\n        onChange={textField.onChange}\n        onKeyDown={handleKeyDown}\n        InputLabelProps={{\n          style: { fontSize: 13, fontFamily: \"Courier Prime\" },\n        }}\n        multiline\n        fullWidth\n      />\n      <Fab variant=\"round\" onClick={handleMessageSend} className={classes.btn}>\n        <Send />\n      </Fab>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport function Error(): JSX.Element {\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <h1>Error 404!</h1>\n      <p>Page not found</p>\n    </div>\n  );\n}\n","import { ActionCreator } from \"redux\";\nimport { createAction, RequestError } from \"redux-api-middleware\";\nimport { MessageType } from \"../components/Message/Message\";\n\nexport enum ChatsActionTypes {\n  CHAT_LOAD_REQUEST = \"CHAT_LOAD_REQUEST\",\n  CHAT_LOAD_SUCCESS = \"CHAT_LOAD_SUCCESS\",\n  CHAT_LOAD_FAILURE = \"CHAT_LOAD_FAILURE\",\n\n  CHATS_MESSAGE_SEND = \"CHATS_MESSAGE_SEND\",\n  CHATS_MESSAGE_SEND_REQUEST = \"CHATS_MESSAGE_SEND_REQUEST\",\n  CHATS_MESSAGE_SEND_SUCCESS = \"CHATS_MESSAGE_SEND_SUCCESS\",\n  CHATS_MESSAGE_SEND_FAILURE = \"CHATS_MESSAGE_SEND_FAILURE\",\n\n  CHATSLISTS_SEND = \"CHATSLISTS_SEND\",\n\n  MESSAGE_UNFIRE = \"MESSAGE_UNFIRE\",\n  MESSAGE_FIRE = \"MESSAGE_FIRE\",\n}\n\nexport type ChatPayload = {\n  title: string;\n  avatar: string;\n  id: number;\n};\n\ntype MessageFireUnfire = {\n  chatId: number;\n};\n\nexport type MessagePayload = MessageType & {\n  chatId: number;\n  id: number;\n};\n\ntype chatsLoadRequestAction = {\n  type: ChatsActionTypes.CHAT_LOAD_REQUEST;\n};\n\ntype chatsLoadSuccessAction = {\n  type: ChatsActionTypes.CHAT_LOAD_SUCCESS;\n  payload: any;\n};\n\ntype chatsLoadFailureAction = {\n  type: ChatsActionTypes.CHAT_LOAD_FAILURE;\n  payload: RequestError;\n  error: boolean;\n};\n\ntype chatsMessageSendAction = {\n  type: ChatsActionTypes.CHATS_MESSAGE_SEND;\n  payload: MessagePayload;\n};\n\ntype chatsListSendAction = {\n  type: ChatsActionTypes.CHATSLISTS_SEND;\n  payload: ChatPayload;\n};\n\ntype messageFireAction = {\n  type: ChatsActionTypes.MESSAGE_FIRE;\n  payload: MessageFireUnfire;\n};\n\ntype messageUnfireAction = {\n  type: ChatsActionTypes.MESSAGE_UNFIRE;\n  payload: MessageFireUnfire;\n};\n\n//Actions\nexport type ChatsActions =\n  | chatsLoadRequestAction\n  | chatsLoadSuccessAction\n  | chatsLoadFailureAction\n  | chatsMessageSendAction\n  | chatsListSendAction\n  | messageFireAction\n  | messageUnfireAction;\n\n//MiddleWare\nexport const chatsLoadAction = () =>\n  createAction({\n    endpoint: \"http://localhost:4000/chats?_embed=messages\",\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n    types: [\n      ChatsActionTypes.CHAT_LOAD_REQUEST,\n      ChatsActionTypes.CHAT_LOAD_SUCCESS,\n      ChatsActionTypes.CHAT_LOAD_FAILURE,\n    ],\n  });\n\nexport const chatsMessageSendAction: ActionCreator<chatsMessageSendAction> = (\n  message: MessagePayload\n) => ({\n  type: ChatsActionTypes.CHATS_MESSAGE_SEND,\n  payload: message,\n});\n\nexport const chatsListSendAction: ActionCreator<chatsListSendAction> = (\n  chat: ChatPayload\n) => ({\n  type: ChatsActionTypes.CHATSLISTS_SEND,\n  payload: chat,\n});\n\nexport const messageSendAction = (message: MessageType) =>\n  createAction({\n    endpoint: \"http://localhost:4000/messages\",\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ ...message }),\n    types: [\n      {\n        type: ChatsActionTypes.CHATS_MESSAGE_SEND_REQUEST,\n        payload: { ...message },\n      },\n      {\n        type: ChatsActionTypes.CHATS_MESSAGE_SEND_SUCCESS,\n        payload: async (res: Response) => await res.json(),\n      },\n      ChatsActionTypes.CHATS_MESSAGE_SEND_FAILURE,\n    ],\n  });\n\nexport const messageFireAction: ActionCreator<messageFireAction> = (\n  chatId: MessageFireUnfire\n) => ({\n  type: ChatsActionTypes.MESSAGE_FIRE,\n  payload: chatId,\n});\n\nexport const messageUnfireAction: ActionCreator<messageUnfireAction> = (\n  chatId: MessageFireUnfire\n) => ({\n  type: ChatsActionTypes.MESSAGE_UNFIRE,\n  payload: chatId,\n});\n","import React, { Component } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n} from \"@material-ui/core\";\nimport { MessageList } from \"../MessageList\";\nimport { MessageForm } from \"../MessageForm\";\nimport { Error } from \"../../pages/Error\";\n\nimport \"./Messenger.css\";\nimport { MessageType } from \"../Message/Message\";\nimport { MessagePayload } from \"../../actions/chats\";\n\ntype MessengerType = {\n  onAdd: (message: MessageType) => void;\n  title: string;\n  nameProfile: string;\n  avatarChat: string;\n  messages: Array<MessagePayload>;\n  loadStatus: string | null;\n};\n\nexport const Messenger: React.FC<MessengerType> = ({\n  title,\n  nameProfile,\n  avatarChat,\n  messages,\n  loadStatus,\n  onAdd,\n}) => {\n  const handleMessageSend = (message: MessageType) => {\n    onAdd(message);\n  };\n\n  switch (loadStatus) {\n    case \"loaded\":\n      return (\n        <div className=\"messenger\">\n          <div className=\"messages-info\">\n            <ListItem alignItems=\"center\">\n              <ListItemAvatar>\n                <Avatar src={avatarChat} />\n              </ListItemAvatar>\n              <ListItemText primary={title} />\n            </ListItem>\n          </div>\n          <div className=\"messages-list\">\n            {messages.length ? (\n              <MessageList messages={messages} />\n            ) : (\n              <div>Empty chat.</div>\n            )}\n          </div>\n          <div className=\"message-form\">\n            <MessageForm onSend={handleMessageSend} profile={nameProfile} />\n          </div>\n        </div>\n      );\n    case \"loading\":\n      return <div className=\"loading\">Loading...</div>;\n    default:\n      return <Error />;\n  }\n};\n","import { createAction, RequestError } from \"redux-api-middleware\";\n\nexport enum ProfileActionTypes {\n  PROFILE_LOAD_REQUEST = \"PROFILE_LOAD_REQUEST\",\n  PROFILE_LOAD_SUCCESS = \"PROFILE_LOAD_SUCCESS\",\n  PROFILE_LOAD_FAILURE = \"PROFILE_LOAD_FAILURE\",\n}\n\nexport type profileLoadRequestAction = {\n  type: ProfileActionTypes.PROFILE_LOAD_REQUEST;\n};\n\nexport type profileLoadSuccessAction = {\n  type: ProfileActionTypes.PROFILE_LOAD_SUCCESS;\n  payload: any;\n};\n\nexport type profileLoadFailureAction = {\n  type: ProfileActionTypes.PROFILE_LOAD_FAILURE;\n  payload: RequestError;\n  error: boolean;\n};\n\nexport type ProfileActions =\n  | profileLoadRequestAction\n  | profileLoadSuccessAction\n  | profileLoadFailureAction;\n\nexport const profileLoadAction = () =>\n  createAction({\n    endpoint: \"http://localhost:4000/profiles\",\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n    types: [\n      ProfileActionTypes.PROFILE_LOAD_REQUEST,\n      ProfileActionTypes.PROFILE_LOAD_SUCCESS,\n      ProfileActionTypes.PROFILE_LOAD_FAILURE,\n    ],\n  });\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { Messenger } from \"../components/Messenger/Messenger\";\nimport { useParams } from \"react-router-dom\";\nimport { chatsLoadAction, chatsMessageSendAction } from \"../actions/chats\";\nimport { profileLoadAction } from \"../actions/profile\";\nimport { AppState } from \"../reducers\";\nimport { MessageType } from \"../components/Message/Message\";\n\nexport const MessengerContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { id } = useParams<{ id: string }>();\n\n  const chats = useSelector((state: AppState) => state.chats.entries);\n  const loadStatus = useSelector((state: AppState) => state.chats.loadStatus);\n  const nameProfile = useSelector(\n    (state: AppState) => state.profile.entries.name\n  );\n\n  let chatId = id ? id : null;\n  let messages = chatId && chats[chatId] ? chats[chatId].messages : null;\n  let title = chatId && chats[chatId] ? chats[chatId].title : null;\n  let avatarChat = chatId && chats[chatId] ? chats[chatId].avatar : null;\n\n  useEffect(() => {\n    if (!chatId) {\n      dispatch(profileLoadAction());\n      dispatch(chatsLoadAction());\n    }\n  }, []);\n\n  const handleMessageSend = (message: MessageType) => {\n    dispatch(\n      chatsMessageSendAction({\n        ...message,\n        id: nanoid(),\n        chatId,\n      })\n    );\n  };\n\n  return (\n    <Messenger\n      title={title}\n      nameProfile={nameProfile}\n      avatarChat={avatarChat}\n      messages={messages}\n      loadStatus={loadStatus}\n      onAdd={handleMessageSend}\n    />\n  );\n};\n","import React from \"react\";\nimport { InfoProfile } from \"../components/Header/Header\";\nimport { Error } from \"./Error\";\nimport \"./Profile.css\";\n\ntype ProfileType = {\n  loadStatus: string | null;\n  infoProfile: InfoProfile;\n};\n\nexport const Profile: React.FC<ProfileType> = ({ loadStatus, infoProfile }) => {\n  switch (loadStatus) {\n    case \"loaded\":\n      return (\n        <div className=\"info\">\n          <div className=\"picContainer\">\n            <img\n              className=\"pic\"\n              src={\n                infoProfile.avatar\n                  ? infoProfile.avatar\n                  : \"http://placehold.it/106&text=1\"\n              }\n            />\n          </div>\n          <div className=\"infoUser\">\n            <h1>Login: {infoProfile.name}</h1>\n            <h1>Age: {infoProfile.age}</h1>\n            <h1>City: {infoProfile.city}</h1>\n            <h1>Main chat: {infoProfile.mainChat}</h1>\n          </div>\n        </div>\n      );\n    case \"loading\":\n      return <div className=\"loading\">Loading...</div>;\n\n    default:\n      return <Error />;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { Profile } from \"../pages/Profile\";\nimport { profileLoadAction } from \"../actions/profile\";\nimport { AppState } from \"../reducers\";\n\nexport const ProfileContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [infoProfile, loadStatus] = useSelector((state: AppState) => {\n    return [state.profile.entries, state.profile.loadStatus];\n  });\n\n  useEffect(() => {\n    if (!infoProfile) dispatch(profileLoadAction());\n  }, []);\n\n  return <Profile infoProfile={infoProfile} loadStatus={loadStatus} />;\n};\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport { Error } from \"../../pages/Error\";\n\nimport \"./Header.css\";\n\nexport type InfoProfile = {\n  name: string;\n  age: number;\n  city: string;\n  mainChat: string;\n  avatar: string;\n};\n\ntype HeaderType = {\n  infoProfile: InfoProfile;\n  loadStatus: string | null;\n};\n\nexport const Header: React.FC<HeaderType> = ({ infoProfile, loadStatus }) => {\n  switch (loadStatus) {\n    case \"loaded\":\n      return (\n        <div className=\"header\">\n          <Link\n            style={{\n              textDecoration: \"none\",\n              cursor: \"pointer\",\n              fontFamily: \"Courier Prime\",\n            }}\n            className=\"header-logo\"\n            to={\"/\"}\n          >\n            Messenger App\n          </Link>\n          <Link\n            to=\"/profile\"\n            style={{ color: \"#bc1d1d\", textDecoration: \"none\" }}\n          >\n            <div className=\"header-avatar\">\n              <Avatar src={infoProfile.avatar} />\n              {infoProfile.name ? infoProfile.name : \"loading\"}\n            </div>\n          </Link>\n        </div>\n      );\n    case \"loading\":\n      return <div>Loading</div>;\n\n    default:\n      return <Error />;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { profileLoadAction } from \"../actions/profile\";\nimport { Header } from \"../components/Header\";\nimport { AppState } from \"../reducers\";\n\nexport const HeaderContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const [infoProfile, loadStatus] = useSelector((state: AppState) => [\n    state.profile.entries,\n    state.profile.loadStatus,\n  ]);\n  useEffect(() => {\n    dispatch(profileLoadAction());\n  }, []);\n\n  return <Header infoProfile={infoProfile} loadStatus={loadStatus} />;\n};\n","import React, { Component } from \"react\";\nimport {\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Divider,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { ChatPayload } from \"../../actions/chats\";\nimport \"./ChatItem.css\";\n\ntype ChatItemType = ChatPayload & {\n  onClick: (id: number) => void;\n  fire: boolean;\n};\n\nexport const ChatItem: React.FC<ChatItemType> = ({\n  avatar,\n  title,\n  id,\n  fire,\n  onClick,\n}) => {\n  const chatClickHandler = () => {\n    if (typeof onClick === \"function\") {\n      onClick(id);\n    }\n  };\n\n  return (\n    <div>\n      <Link\n        to={`/chats/${id}`}\n        style={{\n          textDecoration: \"none\",\n          color: \"white\",\n        }}\n      >\n        <ListItem\n          alignItems=\"center\"\n          className={classNames({ fire: fire })}\n          key={id}\n          onClick={chatClickHandler}\n        >\n          <ListItemAvatar>\n            <Avatar src={avatar} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={title}\n            style={{ fontFamily: \"Courier Prime\" }}\n          />\n        </ListItem>\n      </Link>\n      <Divider variant=\"inset\" component=\"li\" />\n    </div>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport { IconButton, makeStyles, TextField } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport \"./ChatForm.css\";\n\nimport { useFormField } from \"../../hooks/useFromField\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"red\",\n    fontFamily: \"Courier Prime\",\n  },\n  multilineColor: {\n    color: \"white\",\n  },\n});\n\ntype ChatFormType = {\n  onSend: (nameChat: string) => void;\n};\n\nexport const ChatForm: React.FC<ChatFormType> = ({ onSend }) => {\n  const classes = useStyles();\n  const nameChat = useFormField();\n\n  const isEmpty = (str: string | null) => {\n    return !str || /^\\s*$/.test(str);\n  };\n\n  const handleChatSend = () => {\n    if (isEmpty(nameChat.value)) {\n      alert(\"Enter chat name!\");\n      return;\n    }\n\n    if (typeof onSend === \"function\") {\n      onSend(nameChat.value);\n      nameChat.clearValue();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      handleChatSend();\n    }\n  };\n\n  return (\n    <div className=\"btnAddChat\">\n      <TextField\n        label=\"Enter chat name...\"\n        name=\"nameChat\"\n        value={nameChat.value}\n        onChange={nameChat.onChange}\n        onKeyDown={handleKeyDown}\n        InputProps={{\n          classes: {\n            input: classes.multilineColor,\n          },\n        }}\n        multiline\n        fullWidth\n        inputProps={{ maxLength: 15 }}\n      />\n\n      <IconButton\n        aria-label=\"add\"\n        className={classes.root}\n        onClick={handleChatSend}\n      >\n        <AddIcon />\n      </IconButton>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { List } from \"@material-ui/core\";\n\nimport { ChatItem } from \"../ChatItem\";\nimport { ChatForm } from \"../ChatForm\";\nimport { Error } from \"../../pages/Error\";\nimport { ChatPayload } from \"../../actions/chats\";\nimport \"./ChatsList.css\";\n\ntype ChatItemType = {\n  onClick: (id: number) => void;\n  loadStatus: string | null;\n  onAdd: (newchat: string) => void;\n  chats: Array<ChatPayload>;\n  fireChats: Array<boolean>;\n};\nexport const ChatsList: React.FC<ChatItemType> = ({\n  loadStatus,\n  chats,\n  fireChats,\n  onAdd,\n  onClick,\n}) => {\n  const handleChatAdd = (newchat: string): void => {\n    if (newchat) {\n      onAdd(newchat);\n    }\n  };\n\n  switch (loadStatus) {\n    case \"loaded\":\n      return (\n        <div className=\"chats\">\n          <div className=\"chatsList\">\n            <List>\n              {chats.map((chat) => (\n                <ChatItem\n                  avatar={chat.avatar}\n                  title={chat.title}\n                  id={chat.id}\n                  fire={fireChats[chat.id]}\n                  onClick={onClick}\n                  key={chat.id}\n                />\n              ))}\n            </List>\n          </div>\n          <ChatForm onSend={handleChatAdd} />\n        </div>\n      );\n    case \"loading\":\n      return <div className=\"loading\">Loading...</div>;\n    default:\n      return <Error />;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChatsList } from \"../components/ChatsList\";\nimport {\n  chatsLoadAction,\n  messageUnfireAction,\n  chatsListSendAction,\n} from \"../actions/chats\";\nimport { push } from \"connected-react-router\";\nimport { AppState } from \"../reducers\";\n\nexport const ChatsListContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [chats, loadStatus, fireChats] = useSelector((state: AppState) => [\n    state.chats.entries,\n    state.chats.loadStatus,\n    state.chats.fireChatsId,\n  ]);\n\n  let lastChatId = chats.length;\n\n  useEffect(() => {\n    if (!loadStatus) dispatch(chatsLoadAction());\n  }, []);\n\n  const chatAddHandler = (newchat: string) => {\n    dispatch(\n      chatsListSendAction({\n        id: lastChatId.toString(),\n        title: newchat,\n        avatar:\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTk0936CmLeNxPOJFyot8uCx1kU27hoqS5CbA&usqp=CAU\",\n      })\n    );\n    dispatch(push(`/chats/${lastChatId}`));\n  };\n\n  const chatClickHandler = (chatId: number) => {\n    if (chatId >= 0) {\n      dispatch(messageUnfireAction({ chatId }));\n    }\n  };\n\n  return (\n    <ChatsList\n      loadStatus={loadStatus}\n      chats={chats}\n      fireChats={fireChats}\n      onAdd={chatAddHandler}\n      onClick={chatClickHandler}\n    />\n  );\n};\n","import React from \"react\";\n\nimport { MessengerContainer } from \"../../containers/MessengerContainer\";\nimport { ProfileContainer } from \"../../containers/ProfileContainer\";\nimport { HeaderContainer } from \"../../containers/HeaderContainer\";\nimport { ChatsListContainer } from \"../../containers/ChatsListContainer\";\n\nimport { Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport { Error } from \"../../pages/Error\";\n\nimport \"./Layout.css\";\n\nexport const Layout: React.FC = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <HeaderContainer />\n        <div className=\"content\">\n          <div className=\"chatListContainer\">\n            <ChatsListContainer />\n          </div>\n          <div className=\"messengerContainer\">\n            <Switch>\n              <Route\n                exact\n                path=\"/chats/:id([0-9]+)\"\n                component={MessengerContainer}\n              ></Route>\n              <Route exact path=\"/\" render={() => <Redirect to=\"/chats/0\" />} />\n              <Route exact path=\"/profile\" component={ProfileContainer} />\n              <Route path=\"*\">\n                <Error />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  ChatsActionTypes,\n  chatsMessageSendAction,\n  messageFireAction,\n  messageUnfireAction,\n} from \"../actions/chats\";\nimport { nanoid } from \"nanoid\";\nimport { Middleware } from \"redux\";\n\nlet answerBot: Array<number> = [];\n\nexport const botMiddlewares: Middleware = (store) => (next) => (action) => {\n  if (action.type === ChatsActionTypes.CHATS_MESSAGE_SEND) {\n    const { author, chatId } = action.payload;\n    if (author !== \"Robot\" && !answerBot.includes(chatId)) {\n      answerBot.push(chatId);\n      setTimeout(() => {\n        store.dispatch(\n          chatsMessageSendAction({\n            id: nanoid(),\n            chatId,\n            text: `Hi, ${author}`,\n            author: \"Robot\",\n          })\n        );\n\n        const pathname = store.getState().router.location.pathname || \"\";\n        const parts = pathname.match(/\\/chats\\/(.*?)$/) || [];\n        const currentChat = parts[1] || \"\";\n\n        if (chatId !== currentChat) {\n          store.dispatch(messageFireAction({ chatId }));\n        } else {\n          store.dispatch(messageUnfireAction({ chatId }));\n        }\n        answerBot = answerBot.filter((i) => i !== chatId);\n      }, 1000);\n    }\n  }\n  return next(action);\n};\n","import { Middleware } from \"redux\";\r\nimport { ChatsActionTypes, messageSendAction } from \"../actions/chats\";\r\n\r\nexport const addMessageMiddleware: Middleware = (store) => (next) => (\r\n  action\r\n) => {\r\n  if (action.type == ChatsActionTypes.CHATS_MESSAGE_SEND)\r\n    store.dispatch(messageSendAction(action.payload));\r\n  return next(action);\r\n};\r\n","import update from \"react-addons-update\";\nimport { Reducer } from \"redux\";\n\nimport { ChatsActionTypes, ChatsActions } from \"../actions/chats\";\n\nexport type ChatsReducerState = {\n  entries: any;\n  loadStatus: string | null;\n  error: boolean;\n  fireChatsId: Array<boolean>;\n};\n\nconst initialState: ChatsReducerState = {\n  entries: {},\n  loadStatus: null,\n  error: false,\n  fireChatsId: [],\n};\n\nexport const chatsReducer: Reducer<ChatsReducerState, ChatsActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case ChatsActionTypes.CHAT_LOAD_REQUEST:\n      return {\n        ...state,\n        loadStatus: \"loading\",\n        error: false,\n      };\n    case ChatsActionTypes.CHAT_LOAD_SUCCESS:\n      return {\n        ...state,\n        loadStatus: \"loaded\",\n        entries: action.payload,\n        fireChatsId: Array(action.payload.length).fill(false),\n      };\n\n    case ChatsActionTypes.CHAT_LOAD_FAILURE:\n      return {\n        ...state,\n        loadStatus: null,\n        error: true,\n      };\n\n    case ChatsActionTypes.CHATS_MESSAGE_SEND:\n      //react-addons-update\n      return update(state, {\n        entries: {\n          [action.payload.chatId]: {\n            messages: {\n              $push: [\n                {\n                  id: action.payload.id,\n                  text: action.payload.text,\n                  author: action.payload.author,\n                },\n              ],\n            },\n          },\n        },\n      });\n\n    case ChatsActionTypes.CHATSLISTS_SEND:\n      return update(state, {\n        entries: {\n          $merge: {\n            [action.payload.id]: {\n              id: action.payload.id,\n              title: action.payload.title,\n              avatar: action.payload.avatar,\n              messages: [],\n            },\n          },\n        },\n      });\n\n    case ChatsActionTypes.MESSAGE_FIRE:\n      return update(state, {\n        fireChatsId: {\n          [+action.payload.chatId]: { $set: true },\n        },\n      });\n\n    case ChatsActionTypes.MESSAGE_UNFIRE:\n      return update(state, {\n        fireChatsId: {\n          [+action.payload.chatId]: { $set: false },\n        },\n      });\n\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"react\";\nimport { ProfileActions, ProfileActionTypes } from \"../actions/profile\";\n\nexport type ProfileReducerState = {\n  entries: any;\n  loadStatus: string | null;\n  error: boolean;\n};\nconst initialState: ProfileReducerState = {\n  entries: {},\n  loadStatus: null,\n  error: false,\n};\n\nexport const profileReducer: Reducer<ProfileReducerState, ProfileActions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case ProfileActionTypes.PROFILE_LOAD_REQUEST:\n      return {\n        ...state,\n        loadStatus: \"loading\",\n        error: false,\n      };\n    case ProfileActionTypes.PROFILE_LOAD_SUCCESS:\n      return {\n        ...state,\n        loadStatus: \"loaded\",\n        entries: action.payload,\n      };\n\n    case ProfileActionTypes.PROFILE_LOAD_FAILURE:\n      return {\n        ...state,\n        loadStatus: null,\n        error: true,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\nimport { botMiddlewares } from \"./middlewares/bot\";\nimport { createBrowserHistory, History } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport storage from \"redux-persist/lib/storage\";\nimport { persistStore, persistReducer, Persistor } from \"redux-persist\";\nimport { apiMiddleware } from \"redux-api-middleware\";\nimport { addMessageMiddleware } from \"./middlewares/sendMessage\";\n\nimport { createRootReducer } from \"./reducers\";\n\nexport const history: History = createBrowserHistory();\n\nconst persistConfig = {\n  key: \"app\",\n  storage,\n  blacklist: [\"chats\", \"messages\"],\n};\n\nexport const initStore = (): { store: Store; persistor: Persistor } => {\n  const initialStore = {};\n  const store: Store = createStore(\n    persistReducer(persistConfig, createRootReducer(history)),\n    initialStore,\n    composeWithDevTools(\n      applyMiddleware(\n        apiMiddleware,\n        logger,\n        botMiddlewares,\n        routerMiddleware(history),\n        addMessageMiddleware\n      )\n    )\n  );\n\n  const persistor: Persistor = persistStore(store);\n  return { store, persistor };\n};\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History } from \"history\";\nimport { chatsReducer, ChatsReducerState } from \"./chats\";\nimport { profileReducer } from \"./profile\";\n\nexport type AppState = {\n  chats: ChatsReducerState;\n  [propName: string]: any;\n};\n\nexport const createRootReducer = (history: History) =>\n  combineReducers<AppState>({\n    router: connectRouter(history),\n    chats: chatsReducer,\n    profile: profileReducer,\n  });\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Layout } from \"./components/Layout\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { initStore, history } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nconst { store, persistor } = initStore();\n\nReactDom.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <ConnectedRouter history={history}>\n        <Layout />\n      </ConnectedRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n\n"],"sourceRoot":""}